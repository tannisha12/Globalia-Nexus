import React, { useState } from 'react';
import { ChevronDown, ChevronUp, MapPin, Calendar, AlertTriangle, Shield, Zap, DollarSign, Users, Thermometer, Droplets, Wheat, Factory } from 'lucide-react';

interface VulnerabilityCardProps {
  vulnerability: any;
}

export const VulnerabilityCard: React.FC<VulnerabilityCardProps> = ({ vulnerability }) => {
  const [expanded, setExpanded] = useState(false);

  const getRiskColor = (level: string) => {
    switch (level.toLowerCase()) {
      case 'critical': return 'text-red-400 bg-red-500/20 border-red-500/30';
      case 'high': return 'text-orange-400 bg-orange-500/20 border-orange-500/30';
      case 'medium': return 'text-yellow-400 bg-yellow-500/20 border-yellow-500/30';
      case 'low': return 'text-green-400 bg-green-500/20 border-green-500/30';
      default: return 'text-gray-400 bg-gray-500/20 border-gray-500/30';
    }
  };

  const getVulnerabilityIcon = (type: string) => {
    const icons = {
      military: AlertTriangle,
      economic: DollarSign,
      energy: Zap,
      food: Wheat,
      cyber: Shield,
      climate: Thermometer,
      social: Users,
      political: Factory
    };
    const Icon = icons[type as keyof typeof icons] || Shield;
    return <Icon className="w-4 h-4" />;
  };

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-red-400';
    if (score >= 60) return 'text-orange-400';
    if (score >= 40) return 'text-yellow-400';
    return 'text-green-400';
  };

  return (
    <div className="bg-slate-800/50 backdrop-blur-sm rounded-xl border border-slate-700 overflow-hidden">
      <div className="p-6">
        {/* Header */}
        <div className="flex items-start justify-between mb-4">
          <div className="flex-1">
            <h3 className="text-2xl font-semibold text-white mb-2">{vulnerability.country}</h3>
            <div className="flex items-center gap-4 text-sm text-gray-400">
              <div className="flex items-center gap-1">
                <MapPin className="w-4 h-4" />
                <span>{vulnerability.region}</span>
              </div>
              <div className="flex items-center gap-1">
                <Calendar className="w-4 h-4" />
                <span>Updated: {new Date(vulnerability.lastUpdate).toLocaleDateString()}</span>
              </div>
            </div>
          </div>
          <div className={`px-4 py-2 rounded-full border text-sm font-medium ${getRiskColor(vulnerability.overallRisk)}`}>
            {vulnerability.overallRisk} Risk
          </div>
        </div>

        {/* Vulnerability Overview Grid */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-6">
          {Object.entries(vulnerability.vulnerabilities).map(([key, value]: [string, any]) => (
            <div key={key} className="bg-slate-700/50 rounded-lg p-3 border border-slate-600">
              <div className="flex items-center gap-2 mb-2">
                {getVulnerabilityIcon(key)}
                <span className="text-xs text-gray-400 capitalize">{key}</span>
              </div>
              <div className="flex items-center justify-between">
                <span className={`text-sm font-semibold ${getRiskColor(value.level).split(' ')[0]}`}>
                  {value.level}
                </span>
                <span className={`text-lg font-bold ${getScoreColor(value.score)}`}>
                  {value.score}
                </span>
              </div>
              <div className="w-full bg-slate-600 rounded-full h-1.5 mt-2">
                <div 
                  className={`h-1.5 rounded-full transition-all ${
                    value.score >= 80 ? 'bg-red-400' :
                    value.score >= 60 ? 'bg-orange-400' :
                    value.score >= 40 ? 'bg-yellow-400' : 'bg-green-400'
                  }`}
                  style={{ width: `${value.score}%` }}
                />
              </div>
            </div>
          ))}
        </div>

        {/* Key Threats Preview */}
        <div className="mb-4">
          <h4 className="text-lg font-semibold text-white mb-3 flex items-center gap-2">
            <AlertTriangle className="w-5 h-5 text-red-400" />
            Primary Threats
          </h4>
          <div className="space-y-2">
            {vulnerability.keyThreats.slice(0, expanded ? undefined : 2).map((threat: string, index: number) => (
              <div key={index} className="flex items-start gap-2 text-gray-300">
                <div className="w-1.5 h-1.5 bg-red-400 rounded-full mt-2 flex-shrink-0" />
                <span className="text-sm">{threat}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Expand/Collapse Button */}
        <button
          onClick={() => setExpanded(!expanded)}
          className="flex items-center gap-2 text-orange-400 hover:text-orange-300 transition-colors"
        >
          <span>{expanded ? 'Show Less' : 'Show Detailed Analysis'}</span>
          {expanded ? <ChevronUp size={16} /> : <ChevronDown size={16} />}
        </button>
      </div>

      {/* Expanded Content */}
      {expanded && (
        <div className="border-t border-slate-700 p-6 bg-slate-800/30">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Detailed Vulnerability Breakdown */}
            <div>
              <h4 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                <Shield className="w-5 h-5 text-orange-400" />
                Vulnerability Details
              </h4>
              <div className="space-y-3">
                {Object.entries(vulnerability.vulnerabilities).map(([key, value]: [string, any]) => (
                  <div key={key} className="bg-slate-700/30 rounded-lg p-3">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center gap-2">
                        {getVulnerabilityIcon(key)}
                        <span className="text-sm font-medium text-white capitalize">{key}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className={`text-xs px-2 py-1 rounded ${getRiskColor(value.level)}`}>
                          {value.level}
                        </span>
                        <span className={`text-sm font-bold ${getScoreColor(value.score)}`}>
                          {value.score}/100
                        </span>
                      </div>
                    </div>
                    <p className="text-xs text-gray-400">{value.description}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* All Threats */}
            <div>
              <h4 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                <AlertTriangle className="w-5 h-5 text-red-400" />
                Complete Threat Assessment
              </h4>
              <div className="space-y-2">
                {vulnerability.keyThreats.map((threat: string, index: number) => (
                  <div key={index} className="flex items-start gap-2 text-gray-300">
                    <div className="w-1.5 h-1.5 bg-red-400 rounded-full mt-2 flex-shrink-0" />
                    <span className="text-sm">{threat}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};